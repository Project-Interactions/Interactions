# Configuration file

general {

    performance {

        vanilla {
            # (Client Performance | Sodium Feature) Making all immediate chunk updates always deferred helps improve intermittent 
            # low FPS conditions, but potentially leads to rendering delays.
            B:AlwaysDeferChunkUpdates=true

            # (Server Performance) Modified the data structure of capturedBlockSnapshots to a LinkedList to help improve insertion and deletion performance.
            B:CapturedBlockSnapshotsImprovements=true
            B:CapturedBlockSnapshotsImprovementsOreExcavationIntegration=true

            # (Client/Server Performance) Modified Chunk's TileEntityMap to a special data structure to improve performance (experimental, may not work).
            B:ChunkTileEntityMapImprovements=true

            # (Server Performance) Improving the performance of ClassInheritanceMultiMap (up to ~40%).
            B:ClassInheritanceMultiMapImprovements=true

            # (Client Performance) An experimental feature from Patcher mod, using protocol CC-BY-NC-SA 4.0, if there are any copyright issues, please contact me to remove it.
            # Dramatically improves performance by limiting the HUD to a specified FPS, may not be compatible with older devices.
            # May perform strangely with some HUD Mods.
            B:HudCaching=false

            # Select a restricted HUD FPS that is only valid when HudCaching is enabled.
            # Min: 5
            # Max: 240
            I:HudCachingFPSLimit=60

            # (Client Performance) As the configuration name says, use at your own risk.
            B:NoGLError=false

            # (Client/Server Performance) Replaces the internal default ArrayList of NonNullList with an ObjectArrayList (experimental, may not work).
            B:NonNullListImprovements=true

            # (Client Performance) An experimental feature that helps speed up game loading by modifying the model loader's code to enable parallel loading capabilities (5s ~ 40s faster).
            # Incompatible with some mod's models because they use their own model loader, if you encounter a missing model, please report it to the StellarCore author for manual compatibility.
            # Compatible model loader: CTM，LibNine，TConstruct
            # Contrary to VintageFix's DynamicResource functionality and therefore incompatible, you can only choose one.
            B:ParallelModelLoader=false

            # Defining which ModelLoader cannot be safely asynchronized to allow StellarCore to load models
            # using a synchronous approach, usually requires no modification to it.
            S:ParallelModelLoaderBlackList <
                slimeknights.tconstruct.library.client.model.ModifierModelLoader
             >

            # (Client Performance) An experimental feature that uses parallel loading of texture files.
            # It is usually not turned on due to being highly invasive and incompatible with VintageFix and Optifine.
            B:ParallelTextureMapLoad=false

            # (Client Performance) Improve the Map data structures of StateMapperBase to make them faster (~30%).
            B:StateMapperBaseImprovements=true
        }

        avaritia {
            # (Client / Server Performance) Speed up recipe loading with parallel loading.
            B:AvaritiaRecipeManagerImprovements=true

            # (Server Performance) Removing some unnecessary Server to Client synchronization helps ease network bandwidth usage.
            B:TileBaseImprovements=true
        }

        botania {
            # (Server Performance) A feature with some side effects to make sparks use less performance through dynamic Tick acceleration.
            B:SparkEntityImprovements=true

            # What is the maximum working interval of the sparks? They will eventually be accelerated to 1 tick.
            # Only works if SparkEntityImprovements is enabled.
            # Min: 2
            # Max: 60
            I:SparkMaxWorkDelay=10
        }

        chisel {
            # (Server Performance) A feature with some side effects that improves the performance of Auto Chisel's recipe search
            # and makes the interval between searches for recipes increase.
            B:AutoChiselImprovements=true

            # What is the maximum recipe search interval of the Auto Chisels? They will eventually be accelerated to 20 tick.
            # Only works if AutoChiselImprovements is enabled.
            # Min: 20
            # Max: 100
            I:AutoChiselMaxWorkDelay=100
        }

        enderio {
            # (Server Performance) Improve the performance of item determination in FarmerStation using caching (mainly related to the canPlant() method).
            B:FarmerImprovements=true

            # (Server Performance) Removing some unnecessary parts to improve performance, may affect the use of the Profiler.
            B:ItemToolsImprovements=true

            # (Server Performance) Remove some unnecessary judgments to improve performance (may have side effects).
            B:TileEntityBaseImprovements=true
        }

        industrialcraft2 {
            # (Server Performance) Improved some data structures, slight performance improvements.
            B:EnergyCalculatorLegImprovements=true

            # (Server Performance) Improved some data structures, slight performance improvements.
            B:GridImprovements=true

            # (Server Performance) Allows you to adjust the working speed of the Ejector / Pulling Module.
            B:ItemUpgradeModuleImprovements=false

            # Work speed of Ejector / Pulling Module.
            # Only works if ItemUpgradeModuleImprovements is enabled.
            I:ItemUpgradeModuleWorkDelay=5
        }

        ingameinfoxml {
            # Select a restricted HUD FPS that is only valid when HUDFramebuffer is enabled.
            # Min: 5
            # Max: 60
            I:HUDFPS=10

            # (Client Performance) Limit the rendering FPS of InGameInfoXML to significantly improve performance (similar to HUDCaching),
            # may not be compatible with older devices.
            B:HUDFramebuffer=true
        }

        mekanism {
            # (Server Performance) Performance improvements on data structures.
            # MEKCEu already includes this feature, so installing MEKCEu will automatically disable it.
            B:EnergyNetworkImprovements=true

            # (Server Performance) Performance improvements on data structures.
            # MEKCEu already includes this feature, so installing MEKCEu will automatically disable it.
            B:FrequencyImprovements=true

            # (Server Performance) Performance improvements on data structures.
            # MEKCEu already includes this feature, so installing MEKCEu will automatically disable it.
            B:PipeUtilsImprovements=true
        }

        biomesoplenty {
            # (Client/Server Performance) Block them from doing network operations in the main thread.
            B:TrailManagerAsync=true
        }

        extrabotany {
            # (Client/Server Performance) Block them from doing network operations in the main thread.
            B:PersistentVariableHandlerAsync=true
        }

        bloodmagic {
            # (Server Performance) Removing some unnecessary Server to Client synchronization helps ease network bandwidth usage.
            B:BloodAltarImprovements=true
        }

        cucumber {
            # When a block is updated, how many players within range can receive its update?
            # Only works if VanillaPacketDispatcherImprovements is enabled, and only works on mods that use the Cucumber lib.
            D:TileEntityUpdateRange=16.0

            # (Client/Server Performance) Block them from doing network operations in the main thread.
            B:VanillaPacketDispatcherImprovements=true
        }

        customloadingscreen {
            # (Recommend) (Client Performance) We'll never know why we have to wait an extra (20*5)ms for each module loaded.
            B:ModLoadingListenerImprovements=true

            # (Client Performance) Clean up their mapping after the game has finished loading to improve memory usage.
            B:TextureCleanup=true
        }

        endercore {
            # (Server Performance) Improve the speed of matching materials such as items using caching and special data structures
            # to improve the performance of EnderIO Machines overall, with a slight increase in memory usage.
            B:OreThingImprovements=true

            # (Server Performance) Improve the speed of matching materials such as items using caching and special data structures
            # to improve the performance of EnderIO Machines overall, with a slight increase in memory usage.
            B:ThingsImprovements=true
        }

        enderioconduits {
            # (Server Performance) Removing some unnecessary parts to improve performance, may affect the use of the Profiler.
            B:AbstractConduitImprovements=true

            # (Server Performance) Removing some unnecessary parts to improve performance, may affect the use of the Profiler.
            B:TileConduitBundleImprovements=true
        }

        tconstruct {
            # (Server Performance) Improvements in the search performance of Basin Casing recipes.
            B:BasinCastingRecipeSearchImprovements=true

            # (Server Performance) Improvements in the search performance of Melting recipes.
            B:MeltingRecipeSearchImprovements=true

            # (Server Performance) Improvements in the search performance of Table Casing recipes.
            B:TableCastingRecipeSearchImprovements=true

            # (Server Performance) Improvements in the search performance of Smeltery Alloy Casing recipes.
            B:TileSmelteryAlloyRecipeSearchImprovements=true

            # (Server Performance) Smeltery What is the maximum number of recipes that can be completed per tick?
            # Min: 1
            # Max: 100
            I:TileSmelteryMaxAlloyRecipePerTick=5
        }

        forge {
            # (Client/Server Performance) ASMDataTable Annotation Map builds use half of the CPU instead of all of it,
            # helping to improve the computer freezing problem at game startup, but potentially causing the game to take longer to load.
            B:ASMDataTableCPUUsageImprovements=false
        }

        ftblib {
            # (Server Performance) Improved some of the judgments so that it doesn't consume a lot of time sending network packets.
            B:InvUtilsForceUpdateImprovements=true
        }

        ftbquests {
            # (Server Performance) Improved performance of item quest checking (but may result in longer intervals between quest checks).
            B:QuestInventoryListenerImprovements=true
        }

        ctm {
            # (Client Performance) An experimental feature that loads CTM's Metadata data faster (~60%) using parallelStream,
            # usually with few conflict issues. If enabling this feature causes a problem, please report it immediately.
            B:TextureMetadataHandlerImprovements=false
        }

        ebwizardry {
            # (Server Performance) Improved event listening performance for DispenserCastingData.
            # Note: We are currently experiencing strange issues on some devices during testing, please report any unknown crashes with this feature enabled immediately.
            B:DispenserCastingDataImprovements=false
        }

    }

    features {
        # The title.
        S:CustomGameTitle=Minecraft 1.12.2

        # (Client) Allows you to modify the title of the game, highest priority, 
        # supports earlier versions such as CleanroomLoader 3029 (May do the same thing with other mods).
        B:EnableCustomGameTitle=false

        # Does the CustomGameTitle use Hitokoto API to get random messages? (Chinese Only)
        B:TitleUseHitokotoAPI=false

        betterchat {
            # (Client) Message compat (probably does the same thing as UniversalTweaks, but the difference is that this is a special compatibility with the BetterChat mod).
            B:EnableMessageCompat=false
        }

        botania {
            # As the name suggests, use at your own risk.
            B:DisableCosmeticRecipe=false
        }

        legendarytooltips {
            # (Client) As the name suggests, enable it only when necessary.
            B:DisableTitleWrap=true
        }

        mekanism {
            # Allows Mekanism's machines to transmit more than 2147483647 units of energy through FluxNetworks.
            # MEKCEu already includes this feature, so installing MEKCEu will automatically disable it.
            B:FluxNetworksSupport=true

            # Allows TheOneProbe to show that Mekanism's machines exceed 2147483647 units of energy.
            # MEKCEu already includes this feature, so installing MEKCEu will automatically disable it.
            B:TOPSupport=true
        }

        nuclearcraftoverhauled {
            # Completely disable NuclearCraft: Overhauled's radiation system if you really don't want to see them in every item's NBT, haha.
            B:DisableRadiationCapability=false
        }

        techguns {
            # Are bullets treated as projectiles (affecting damage determination)?
            B:BulletIsProjectile=true

            # Safe mode is used by default for every player.
            B:ForceSecurityMode=true
        }

        moreelectrictools {
            # Disable the Efficient enchantment, if you think this enchantment will appear on any item it's just too bad.
            B:RemoveEfficientEnergyCostEnchantment=false
        }

        fontscale {
            # (Client) Allows you to modify the specific scaling of small fonts in the AE2 GUI.
            # Min: 0.25
            # Max: 1.0
            D:AppliedEnergetics2=0.5

            # (Client) Allows you to modify the specific scaling of small fonts in the EnderUtilities GUI.
            # Min: 0.25
            # Max: 1.0
            D:EnderUtilities=0.5
        }

        astralsorcery {
            # Disables AstralSorcery's ChainMining perk, make that doesn't work.
            B:DisableChainMining=true
        }

        rgbchat {
            # (Client) Complete rewrite of RGBChat's font renderer to optimize performance and fix crashes.
            B:TrueRGBSimpleRendererImprovements=true
        }

        vanilla {
            # (Server) Allows CriterionProgress to be serialized in multiple threads.
            B:AsyncAdvancementSerialize=true

            # (Client Only) Listening to clients loading/unloading new worlds, disabling this option will cause some features on memory leak fixing to fail.
            B:HandleClientWorldLoad=true

            # An extra feature that stops the model loader from printing errors, neat log, no?
            # May have implications for Debug, cannot prevent errors in the output of custom loaders. only available if ParallelModelLoader is enabled.
            B:ShutUpModelLoader=false
        }

        ic2 {
            # A highly intrusive feature that makes the IC2 and most of its Addon mod's power items no longer use the endurance value to
            # display power, but instead use a special display, a feature that disables the endurance value and helps automate the crafting.
            B:ElectricItemNonDurability=true
        }

        enderioconduits {
            # If you're really tired of all this useless logging, set it to true (filter only the no side effects section).
            B:PrevEnderLiquidConduitNetworkLogSpam=true
        }

        lazyae2 {
            # The Level Maintainer request synthesis will always be made to the set value, not just to the critical value.
            B:LevelMaintainerRequestCountImprovements=false
        }

    }

    bugfixes {

        armourersworkshop {
            # Cleanroom only, used to fix an issue that caused the game to crash when unloading skin texture files.
            B:SkinTextureCrashFixes=true
        }

        astralsorcery {
            # This option is used to fix some item duplication issues on Astral Tome's constellation paper collection page.
            B:ContainerJournalFixes=true

            # This option is used to fix occasional crashes related to PlayerAttributeMap.
            B:PlayerAttributeMapCrashFixes=true
        }

        mrcrayfishfurniture {
            # Problem preventing certain container items from duplicate.
            B:BlockFurnitureTileFixes=true

            # Stops the game from freezing in certain special cases, mainly occurring on photo frames and other similar blocks.
            B:ImageCacheCrashFixes=true

            # Make blocks be rotated without losing their internal attributes and items (possibly not all blocks).
            B:RotatableFurniture=true
            B:TileEntityFurnitureFixes=true
        }

        enderioconduits {
            # A somewhat disruptive feature fix that modifies some of the way item conduits work,
            # allowing some special cases to store extracted items inside the conduit,
            # which will help fix some item duplication issues,
            # but may introduce a slight performance overhead and some unexpected filter issues.
            B:ItemConduitItemStackCache=true
        }

        fluxnetworks {
            # Fixes an issue where TheOneProbe on a dedicated server shows localized text anomalies.
            B:TheOneProbeIntegration=true
        }

        industrialcraft2 {
            # Fixed an issue where some item repair recipes would duplication items.
            B:GradualRecipeFixes=true

            # Fixed an issue where the orientation determined by Ejector / Pulling Upgrade was the opposite of what it actually was.
            B:StackUtilInvFacingFixes=true
        }

        ingameinfoxml {
            # Fix the issue where a paragraph would pop up to report an error in a server environment, that's all.
            B:PlayerHandlerFixes=true
        }

        immersiveengineering {
            # (Client Only) Clear the model cache when the player switches worlds to avoid memory leaks.
            # Minor performance impact. Mainly a problem when installing with other mods.
            B:AutoCleanRenderCache=true

            # Fixes an issue that would cause fluids to duplicate in some special cases, although they were a bit tricky to reproduce.
            B:JerryCanFixes=true

            # Fixes an issue that would cause items to duplicate in certain special cases, although they were a bit tricky to reproduce.
            B:MultiblockStructureContainerFixes=true

            # Fixes an issue that caused ArcFurnace's item bar items to stack
            # more than their items themselves under certain special circumstances, helping to fix item duplication.
            B:TileEntityArcFurnaceInventoryFixes=true

            # Makes Excavator not drop twice drops when digging blocks (possible side effect).
            B:TileEntityExcavatorDigBlockFixes=true
        }

        moreelectrictools {
            # Items such as Electric First Aid Life Support do not continue to work if the player has died.
            B:LifeSupportsFixes=true
        }

        scalingguis {
            # Fixes an issue that caused a crash when deleting invalid GUI configurations.
            B:JsonHelperCrashFixes=true
        }

        sync {
            # Make players get off their mounts when they die.
            B:RidingFixes=true

            # A special fix that keeps Sync from triggering some weird item duplication issues when installed with Techguns.
            B:TechgunsDuplicationFixes=true
        }

        techguns {
            # Fix for recipes not working properly for certain items (Techguns only).
            B:InvalidRecipeFixes=true

            # Fixes an issue that would cause crashes in server environments.
            B:TGPermissionsCrashFixes=true
        }

        theoneprobe {
            # Prevents TheOneProbe from rendering the entity/player in such a way that their head is locked to a fixed pitch.
            B:PlayerEntityRenderFixes=true
        }

        thermaldynamics {
            # Fix a fluid duplication issue where they would only appear on Super-Laminar FluidDuct.
            B:FluidDuplicateFixes=true
        }

        draconicevolution {
            # This option is used to fix some item duplication issues with CraftingInjector.
            B:CraftingInjectorFixes=true
        }

        container {
            # A generic feature that when a player's open TileEntity GUI is uninstalled, 
            # it also forces the player's open GUI to be closed.
            B:ContainerUnloadTileEntityFixes=true
        }

        cofhcore {
            # This option is used to fix some item duplication issues with any containers related to TE5.
            B:ContainerInventoryItemFixes=true

            # This option is used to fix an issue that would accidentally cause non-stackable items to
            #  exceed their maximum number of stacks.
            B:TileInventoryFixes=true
        }

        thermalexpansion {
            # The problem with stopping a backpack from replicating is that this probably does the same thing as UniversalTweaks.
            B:ContainerSatchelFilterFixes=true
        }

        critical {
            # Usually just set it to true, this option fixed a serious network packet problem.
            B:GuGuUtilsSetContainerPacket=true
        }

        avaritaddons {
            # This option is used to fix some item duplication issues with Auto Extreme Crafting Table.
            B:TileEntityExtremeAutoCrafterFixes=true
        }

        customstartinggear {
            # This option causes CustomStartingGear to standardize the encoding of file reads to UTF-8,
            # preventing them from having problems on computers in certain regions.
            B:DataManagerCharSetFixes=true
        }

        extrabotany {
            # Prevents the Mana Liquefaction Device from storing far more liquid magic than it is set to store.
            B:TileManaLiquefactionFixes=true
        }

        vanilla {
            # If the NBT size is larger than the maximum size, it will display a warning message.
            # It will only take effect if LongNBTKiller is enabled.
            B:DisplayLargeNBTWarning=false

            # Unlocks the size limit of NBT and removes the length limit of NBTTagCompound and NBTTagList,
            # usually many mods will have this feature, you just need to enable one of these modules.
            B:LongNBTKiller=false

            # The maximum depth of NBTTagCompound and NBTTagList.
            # It will only take effect if LongNBTKiller is enabled.
            I:MaxNBTDepth=2048

            # The maximum size of NBT.
            # It will only take effect if LongNBTKiller is enabled.
            I:MaxNBTSize=16777216
        }

        tconevo {
            # Fix a special crash issue that would cause special cases,
            # reporting that they were attributed to xyz.phanta.tconevo.integration.avaritia.client.AvaritiaMaterialModel$BakedAvaritiaMaterialModel$ WithoutHalo handleCosmicLighting().
            B:HandleCosmicLightingNPEFixes=true
        }

        modularrouters {
            # Prevent routers from recognizing fluid bucket containers to avoid unexpected fluid replication problems.
            B:BufferHandlerFluidHandlerFixes=true
        }

        advancedrocketry {
            # Fix the NPE problem that occasionally occurs with BiomeChanger.
            B:ItemBiomeChanger=true

            # When the planetDefs.xml file is corrupted, make it regenerate the file instead of letting it damn near crash.
            # This is usually only a problem if the game process is unexpectedly exited, and the file is usually unrecoverable without a backup.
            B:PreventDimensionManagerCrash=true
        }

        ancientspellcraft {
            # (Client Only) Fix a memory leak caused by AncientSpellCraft's FakePlayer,
            # mainly in that it would cause the first world loaded not to be cleaned up by Java GC.
            # Experimental, if a crash occurs with anything related to ASFakePlayer, please report this issue immediately.
            B:ASFakePlayerFixes=false
        }

        botania {
            # (Client Only) Automatically clean up data when the player switches worlds, optional feature as WeakHashMap does not usually cause memory leaks.
            B:AutoCleanManaNetworkHandler=true
        }

        journeymap {
            # (Client Only) Automatically clears the radar player cache when a player switches worlds to avoid memory leaks caused in the client.
            B:AutoCleanPlayerRadar=true
        }

        libvulpes {
            # (Client Only) Automatically clean up InputSyncHandler's spaceDown data when the player switches worlds.
            # Although libvulpes has already coded this judgment, there is still a small chance that it will trigger a memory leak.
            B:AutoCleanInputSyncHandlerData=true
        }

        mekanism {
            # (Client Only) Automatically clean up old player data when the player switches worlds to address some memory leaks,
            # and while Mekanism has written cleanup features, they will only clean up when returning to the main menu.
            B:AutoCleanPortableTeleports=true
        }

        rpsideas {
            # (Client Only) Fix memory leaks caused by improper object management on the client side.
            B:ItemBioticSensorMemoryLeakFixes=true
        }

    }

    debug {
        B:EnableDebugLog=false
    }

}


